// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/shaken1/ProjetoCompilador/token"
)

const (
	NoState    = -1
	NumStates  = 94
	NumSymbols = 105
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '-'
1: '+'
2: '*'
3: '/'
4: '%'
5: '='
6: '>'
7: '<'
8: '>'
9: '='
10: '<'
11: '='
12: '<'
13: '>'
14: ':'
15: '='
16: ','
17: ';'
18: '('
19: ')'
20: '{'
21: '}'
22: ','
23: 'E'
24: 'E'
25: '''
26: '\'
27: 'n'
28: '\'
29: 't'
30: ' '
31: '('
32: ')'
33: ','
34: '''
35: 'i'
36: 'f'
37: 'e'
38: 'l'
39: 's'
40: 'e'
41: 'w'
42: 'h'
43: 'i'
44: 'l'
45: 'e'
46: 'r'
47: 'e'
48: 't'
49: 'u'
50: 'r'
51: 'n'
52: 'f'
53: 'l'
54: 'o'
55: 'a'
56: 't'
57: 'c'
58: 'h'
59: 'a'
60: 'r'
61: 'v'
62: 'o'
63: 'i'
64: 'd'
65: 'p'
66: 'r'
67: 'n'
68: 't'
69: 'i'
70: 'n'
71: 't'
72: 'p'
73: 'r'
74: 'o'
75: 'c'
76: 'v'
77: 'a'
78: 'r'
79: 'o'
80: 'r'
81: 'a'
82: 'n'
83: 'd'
84: 'n'
85: 'o'
86: 't'
87: '_'
88: ','
89: '\t'
90: '\n'
91: '\r'
92: ' '
93: '*'
94: '*'
95: '\n'
96: '>'
97: '>'
98: '*'
99: '<'
100: '<'
101: '0'-'9'
102: 'A'-'Z'
103: 'a'-'z'
104: .
*/
