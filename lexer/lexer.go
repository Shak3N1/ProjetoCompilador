// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/shaken1/ProjetoCompilador/token"
)

const (
	NoState    = -1
	NumStates  = 86
	NumSymbols = 112
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '-'
1: ','
2: 'E'
3: 'E'
4: '''
5: '\'
6: 'n'
7: '\'
8: 't'
9: ' '
10: '''
11: 'i'
12: 'f'
13: 'e'
14: 'l'
15: 's'
16: 'e'
17: 'w'
18: 'h'
19: 'i'
20: 'l'
21: 'e'
22: 'r'
23: 'e'
24: 't'
25: 'u'
26: 'r'
27: 'n'
28: 'f'
29: 'l'
30: 'o'
31: 'a'
32: 't'
33: 'c'
34: 'h'
35: 'a'
36: 'r'
37: 'v'
38: 'o'
39: 'i'
40: 'd'
41: 'p'
42: 'r'
43: 'n'
44: 't'
45: 'i'
46: 'n'
47: 't'
48: 'a'
49: 'n'
50: 'd'
51: 'o'
52: 'r'
53: 'n'
54: 'o'
55: 't'
56: 'p'
57: 'r'
58: 'o'
59: 'c'
60: 'v'
61: 'a'
62: 'r'
63: '<'
64: '>'
65: '<'
66: '='
67: '>'
68: '='
69: '='
70: '<'
71: '>'
72: '+'
73: '-'
74: '*'
75: '/'
76: '%'
77: 'a'
78: 'n'
79: 'd'
80: 'o'
81: 'r'
82: 'n'
83: 'o'
84: 't'
85: ':'
86: '='
87: ')'
88: '('
89: ','
90: ';'
91: '{'
92: '}'
93: '_'
94: ','
95: '\t'
96: '\n'
97: '\r'
98: ' '
99: '*'
100: '*'
101: '\n'
102: '>'
103: '>'
104: '*'
105: '<'
106: '<'
107: 'a'-'z'
108: '0'-'9'
109: 'A'-'Z'
110: 'a'-'z'
111: .
*/
